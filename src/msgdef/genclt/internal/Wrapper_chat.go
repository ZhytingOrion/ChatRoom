package internal

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"proto/chat"

	"zeus/net/client"

	assert "github.com/aurelien-rainone/assertgo"
)

type IProc_chat interface {
	MsgProc_ChatResponse(msg *chat.ChatResponse)
	MsgProc_ChatMessage(msg *chat.ChatMessage)
}

// Wrapper 是 Proc 的封装。
// Proc 由用户实现，其 MsgProc_MyMsg(msg *pb.MyMsg) 中的参数是具体的消息类。
// 封装后为 MsgProc_MyMsg(msg IMsg), 这个接口才能注册到服务器。
type Wrapper_chat struct {
	proc IProc_chat
}

func RegProc_chat(sess _IRegMsgProcFunc, proc IProc_chat) {
	assert.True(sess != nil, "session is nil")
	assert.True(proc != nil, "proc is nil")
	w := &Wrapper_chat{
		proc: proc,
	}

	// [ServerToClient] 注册接收的消息。需要从ID创建消息。
	sess.RegMsgProcFunc(10002, w.New_ChatResponse, w.MsgProc_ChatResponse)
	sess.RegMsgProcFunc(10003, w.New_ChatMessage, w.MsgProc_ChatMessage)
}

func (w *Wrapper_chat) New_ChatResponse() client.IMsg {
	return &chat.ChatResponse{}
}

func (w *Wrapper_chat) MsgProc_ChatResponse(msg client.IMsg) {
	w.proc.MsgProc_ChatResponse(msg.(*chat.ChatResponse))
}

func (w *Wrapper_chat) New_ChatMessage() client.IMsg {
	return &chat.ChatMessage{}
}

func (w *Wrapper_chat) MsgProc_ChatMessage(msg client.IMsg) {
	w.proc.MsgProc_ChatMessage(msg.(*chat.ChatMessage))
}
